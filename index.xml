<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>About me on Pavel Danov / 亶保罗</title>
    <link>https://paveldanov.net/</link>
    <description>Recent content in About me on Pavel Danov / 亶保罗</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 23 Aug 2025 07:53:40 +0000</lastBuildDate>
    <atom:link href="https://paveldanov.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Intelligence</title>
      <link>https://paveldanov.net/notes/intelligence/</link>
      <pubDate>Sat, 23 Aug 2025 07:53:40 +0000</pubDate>
      <guid>https://paveldanov.net/notes/intelligence/</guid>
      <description>&lt;p&gt;Excerpt from &lt;a href=&#34;https://en.wikipedia.org/wiki/The_Aristos&#34;&gt;The Aristos (1964)&lt;/a&gt; by John Fowles. Taken from the section titled &lt;code&gt;Inability to enact good&lt;/code&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;18 The second cause of failure to enact good stems from conflict of&#xA;intention. High intelligence leads to multiplicity of interest and a&#xA;sharpened capacity to foresee the consequences of any action. Will is lost&#xA;in a labyrinth of hypothesis.&lt;/p&gt;&#xA;&lt;/blockquote&gt;</description>
    </item>
    <item>
      <title>Plovdiv Game Jam 2025</title>
      <link>https://paveldanov.net/2025/02/plovdiv-game-jam/</link>
      <pubDate>Tue, 25 Feb 2025 18:00:00 +0000</pubDate>
      <guid>https://paveldanov.net/2025/02/plovdiv-game-jam/</guid>
      <description>&lt;p&gt;I was a lecturer at this year&amp;rsquo;s Plovdiv Game Jam where I gave a presentation on Performance-Aware programming. The lecture was mostly an overview of some common ways that can help us when we want to write performant code.&lt;/p&gt;&#xA;&lt;p&gt;Unfortunately, nowadays the majority of developers don&amp;rsquo;t think about such things at all. My time was quite limited, so I tried to show and explain as many starting points in this area as possible.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Key to Doing</title>
      <link>https://paveldanov.net/notes/key-to-doing/</link>
      <pubDate>Mon, 25 Nov 2024 23:19:45 +0000</pubDate>
      <guid>https://paveldanov.net/notes/key-to-doing/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;看到和做到是两回事，&lt;/p&gt;&#xA;&lt;p&gt;说到和做到是两回事。&lt;/p&gt;&#xA;&lt;p&gt;理解和做到，仍旧是两回事。&lt;/p&gt;&#xA;&lt;p&gt;不要把它们混为一谈。&lt;/p&gt;&#xA;&lt;p&gt;这是做到的关键。&lt;/p&gt;&#xA;&lt;p&gt;&amp;ndash; Unknown author&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;my-translation&#34;&gt;My translation&lt;/h2&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Seeing and doing are two different things.&lt;/p&gt;&#xA;&lt;p&gt;Saying and doing are two different things.&lt;/p&gt;&#xA;&lt;p&gt;Understanding and doing are yet two different things.&lt;/p&gt;&#xA;&lt;p&gt;Don&amp;rsquo;t confuse them.&lt;/p&gt;&#xA;&lt;p&gt;This is the key to doing.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>Focus</title>
      <link>https://paveldanov.net/notes/focus/</link>
      <pubDate>Wed, 20 Nov 2024 21:55:06 +0000</pubDate>
      <guid>https://paveldanov.net/notes/focus/</guid>
      <description>&lt;p&gt;Do something only for 1 minute, focusing as hard as you can.&lt;/p&gt;&#xA;&lt;p&gt;Then take a break.&lt;/p&gt;&#xA;&lt;p&gt;Then try for 2 minutes.&lt;/p&gt;&#xA;&lt;p&gt;Then take a break.&lt;/p&gt;&#xA;&lt;p&gt;Repeat until you can focus for a long time!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Back to University</title>
      <link>https://paveldanov.net/2024/11/back-to-university/</link>
      <pubDate>Thu, 14 Nov 2024 20:49:31 +0000</pubDate>
      <guid>https://paveldanov.net/2024/11/back-to-university/</guid>
      <description>&lt;p&gt;I haven&amp;rsquo;t written here for quite a while. Writing again feels like a way to mark this new beginning, to chronicle what it’s like returning to a structured path after so many years. In my time of absence, I began countless drafts, but none felt quite right to publish. The past few years have been a storm of global crises, career shifts, and personal battles that left me questoning my direction. I switched jobs twice, only to leave them both and go towards the contracting route. It was a time of intense internal work, a sort of 内功 (nèigōng), or &lt;em&gt;&amp;lsquo;internal skill/strength&amp;rsquo;&lt;/em&gt; as it&amp;rsquo;s called in Chinese martial arts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>On Consultancies</title>
      <link>https://paveldanov.net/programmers-limbo/on-consultancies/</link>
      <pubDate>Tue, 11 Apr 2023 12:28:22 +0100</pubDate>
      <guid>https://paveldanov.net/programmers-limbo/on-consultancies/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;There are millions of consultancies out there and more are popping left and right by the minute. Some are outsource shops or a couple of dev friends teaming up in trying to create a business, others are big multinational corporations that bid on big government or enterprise contracts. There&amp;rsquo;s a consultancy for virtually every business domain you can think of and everything in-between. They like to advertise themselves as providing &lt;code&gt;digital transformation&lt;/code&gt;, being &lt;code&gt;cloud native&lt;/code&gt;, &lt;code&gt;engineering intuition&lt;/code&gt; (&lt;em&gt;facepalm&lt;/em&gt;) and a litany of other meaningless slogans.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Compiling C&#43;&#43; project using SFML with cl.exe</title>
      <link>https://paveldanov.net/2021/11/compiling-cpp-sfml-windows-cli/</link>
      <pubDate>Wed, 10 Nov 2021 12:50:00 +0000</pubDate>
      <guid>https://paveldanov.net/2021/11/compiling-cpp-sfml-windows-cli/</guid>
      <description>&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;&#xA;&lt;p&gt;The usefulness of this approach is debatable, but let me try to offer an answer on why you might want to know how to do that. I think it&amp;rsquo;s the mark of a good engineer to know what&amp;rsquo;s happening under the hood. Simple as that. New or inexperienced developers will benefit from understanding the connection between the user interface in Visual Studio and the actual command line tools used underneath.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How I learned 1500 Chinese Characters in a Month - Heisig Method Review</title>
      <link>https://paveldanov.net/2020/05/learning-1500-chinese-characters-in-a-month-heisig-method-review/</link>
      <pubDate>Thu, 14 May 2020 20:00:00 +0100</pubDate>
      <guid>https://paveldanov.net/2020/05/learning-1500-chinese-characters-in-a-month-heisig-method-review/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Hello dear visitor!&lt;/p&gt;&#xA;&lt;p&gt;Before you stands a very long article in which you&amp;rsquo;ll find my review and results after spending 31 days with a book called &lt;a href=&#34;https://www.goodreads.com/book/show/5862954-remembering-simplified-hanzi-1&#34;&gt;Remembering Simplified Hanzi 1: How Not to Forget the Meaning and Writing of Chinese Characters&lt;/a&gt; written by James Heisig and Timothy W. Richardson. I think it&amp;rsquo;s a groundbreaking book and an amazing method because it broke down a certain wall that was hindering my desire and drive to learn the Chinese language for a long time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Publishing to Multiple Topics in Azure Service Bus</title>
      <link>https://paveldanov.net/2020/01/publishing-to-multiple-topics-in-azure-service-bus/</link>
      <pubDate>Sat, 11 Jan 2020 19:33:48 +0000</pubDate>
      <guid>https://paveldanov.net/2020/01/publishing-to-multiple-topics-in-azure-service-bus/</guid>
      <description>&lt;h2 id=&#34;multiple-topics&#34;&gt;Multiple topics&lt;/h2&gt;&#xA;&lt;p&gt;There are two main approaches when it comes to topics in Azure Service Bus. Depending what&amp;rsquo;s your architecture and needs you can have either:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Filtered topic&lt;/strong&gt; - this means you have only one topic for all of your event types. All publishers push messages onto that single topic. Some of the message fields and properties are then used for filtering by the subscribers since in most cases a subscriber will be interested only in certain types of messages.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Multiple topics&lt;/strong&gt; - you have multiple topics for different domain events or channels of your system. You can still leverage the filtering to have more granular control in your subscribers. You can also have topics based on priority, event types etc.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Our main concern in this post is the second use case and how to build a nice &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/api/microsoft.azure.servicebus.topicclient?view=azure-dotnet&#34;&gt;&lt;strong&gt;&lt;code&gt;ITopicClient&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt; factory inside a .NET Core project. I&amp;rsquo;ve built my example with Azure Functions, but 99.9% of the code is completely identical to what you would do in a normal .NET Core web service.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Auto Refreshing Cache in .NET</title>
      <link>https://paveldanov.net/2019/07/auto-refreshing-cache-in-dotnet/</link>
      <pubDate>Thu, 11 Jul 2019 22:47:02 +0100</pubDate>
      <guid>https://paveldanov.net/2019/07/auto-refreshing-cache-in-dotnet/</guid>
      <description>&lt;h2 id=&#34;caching-is-hard&#34;&gt;Caching is hard&lt;/h2&gt;&#xA;&lt;p&gt;On a bright sunny day while you&amp;rsquo;re working on your awesome project you catch a glimpse of something. You bring yourself closer to the monitor and begin meticulously examining your code. What you find brings you feelings of disgust and shame! You&amp;rsquo;ve been calling an API retrieving data you need over and over again even though said data hardly changes!&lt;/p&gt;&#xA;&lt;p&gt;Being the smart and responsible engineer that you are, you decide to rectify your mistake immediately. You think to yourself&lt;/p&gt;</description>
    </item>
    <item>
      <title>.NET Core API with DynamoDB Context Dependency Injection</title>
      <link>https://paveldanov.net/2018/03/net-core-api-dynamodb-dependency-injection/</link>
      <pubDate>Tue, 13 Mar 2018 22:27:05 +0200</pubDate>
      <guid>https://paveldanov.net/2018/03/net-core-api-dynamodb-dependency-injection/</guid>
      <description>&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;&#xA;&lt;p&gt;Today I faced a problem which I knew would come, but didn&amp;rsquo;t have time to implement properly at the time. There were more urgent tasks at hand before, deadlines to be met and this issue remained unresolved.&lt;/p&gt;&#xA;&lt;p&gt;Amazon&amp;rsquo;s .NET Core SDK is very good for the most part. Everything works as it should. But let&amp;rsquo;s say you use the &lt;a href=&#34;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DotNetSDKHighLevel.html&#34;&gt;.NET Object Persistence Model&lt;/a&gt; for &lt;a href=&#34;https://aws.amazon.com/dynamodb/&#34;&gt;DynamoDB&lt;/a&gt; in your service and you have mapped C# classes to DynamoDB tables like this:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
