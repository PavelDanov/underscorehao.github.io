<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>_hao</title>
    <link>https://www.underscorehao.net/</link>
    <description>Recent content on _hao</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 11 Jan 2020 19:33:48 +0000</lastBuildDate>
    
	<atom:link href="https://www.underscorehao.net/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Publishing to Multiple Topics in Azure Service Bus</title>
      <link>https://www.underscorehao.net/2020/01/publishing-to-multiple-topics-in-azure-service-bus/</link>
      <pubDate>Sat, 11 Jan 2020 19:33:48 +0000</pubDate>
      
      <guid>https://www.underscorehao.net/2020/01/publishing-to-multiple-topics-in-azure-service-bus/</guid>
      <description>Multiple topics There are two main approaches when it comes to topics in Azure Service Bus. Depending what&#39;s your architecture and needs you can have either:
 Filtered topic - this means you have only one topic for all of your event types. All publishers push messages onto that single topic. Some of the message fields and properties are then used for filtering by the subscribers since in most cases a subscriber will be interested only in certain types of messages.</description>
    </item>
    
    <item>
      <title>Auto Refreshing Cache in .NET</title>
      <link>https://www.underscorehao.net/2019/07/auto-refreshing-cache-in-dotnet/</link>
      <pubDate>Thu, 11 Jul 2019 22:47:02 +0100</pubDate>
      
      <guid>https://www.underscorehao.net/2019/07/auto-refreshing-cache-in-dotnet/</guid>
      <description>Caching is hard On a bright sunny day while you&#39;re working on your awesome project you catch a glimpse of something. You bring yourself closer to the monitor and begin meticulously examining your code. What you find brings you feelings of disgust and shame! You&#39;ve been calling an API retrieving data you need over and over again even though said data hardly changes!
Being the smart and responsible engineer that you are, you decide to rectify your mistake immediately.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.underscorehao.net/about/</link>
      <pubDate>Wed, 24 Oct 2018 19:59:07 +0000</pubDate>
      
      <guid>https://www.underscorehao.net/about/</guid>
      <description>Hello there I&#39;m Pavel Danov a.k.a. _hao or underscoreHao (on websites that don&#39;t support underscores). Welcome to my personal website. Here you can find about things that interest me and occupy my attention most of the time. I&#39;m currently residing in
London, United Kingdom I was born in Bulgaria but moved to London a couple of months ago almost a year ago.
For the better part of a decade my time has been devoted to Software and Martial Arts.</description>
    </item>
    
    <item>
      <title>.NET Core API with DynamoDB Context Dependency Injection</title>
      <link>https://www.underscorehao.net/2018/03/net-core-api-dynamodb-dependency-injection/</link>
      <pubDate>Tue, 13 Mar 2018 22:27:05 +0200</pubDate>
      
      <guid>https://www.underscorehao.net/2018/03/net-core-api-dynamodb-dependency-injection/</guid>
      <description>The Problem Today I faced a problem which I knew would come, but didn&#39;t have time to implement properly at the time. There were more urgent tasks at hand before, deadlines to be met and this issue remained unresolved.
Amazon&#39;s .NET Core SDK is very good for the most part. Everything works as it should. But let&#39;s say you use the .NET Object Persistence Model for DynamoDB in your service and you have mapped C# classes to DynamoDB tables like this:</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://www.underscorehao.net/contact/</link>
      <pubDate>Sat, 03 Mar 2018 10:54:07 +0200</pubDate>
      
      <guid>https://www.underscorehao.net/contact/</guid>
      <description>If youâ€™re interested in talking with me about a project, idea or something else you can send me an email or use one of the links on the main page to contact me.
Also you can buy me a beer if I helped you with something : )  Bitcoin - 1JXh8r3WTQt8dN8kc2rLzRNSEQafSBNHpk Ethereum - 0x56F8584849568D5F7C2BB31DdC8552a1b4515F63 OMG - 0x56F8584849568D5F7C2BB31DdC8552a1b4515F63 Litecoin - LNWMGeGzy9fDCbfZLvr6swLYxmuA7LTXex  </description>
    </item>
    
  </channel>
</rss>